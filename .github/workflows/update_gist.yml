name: Aggiorna Gist con uscite giornaliere

on:
  schedule:
    - cron: "0 6 * * *"
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Installa le dipendenze Playwright per il sistema
      - name: Install Playwright system dependencies
        run: npx playwright install-deps

      # Installa le dipendenze Node.js del progetto
      - name: Install npm dependencies
        run: npm install

      # Installa i browser di Playwright (Chromium, Firefox, WebKit)
      - name: Install Playwright browsers
        run: npx playwright install

      # Esegui lo script Node.js
      - name: Run script
        run: |
          node script.js || { echo 'Script fallito'; exit 1; }

      # Carica i dati nel Gist usando Node.js
      - name: Update Gist using Node.js
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GIST_TOKEN }}
          GIST_ID: ${{ secrets.GIST_ID }}
        run: |
          cat > update_gist.js << 'EOF'
          const fs = require('fs');
          const https = require('https');
          
          // Funzione per aggiornare il Gist
          async function updateGist() {
            try {
              // Combina tutti i file in un array unico
              const filePattern = /^games_part_\d+\.json$/;
              const files = fs.readdirSync('.').filter(f => filePattern.test(f));
              
              let allGames = [];
              for (const file of files) {
                console.log(`Elaborazione del file ${file}...`);
                const content = fs.readFileSync(file, 'utf8');
                const games = JSON.parse(content);
                allGames = allGames.concat(games);
              }
              
              console.log(`Totale giochi combinati: ${allGames.length}`);
              
              // Prepara il payload per l'API GitHub
              const payload = {
                files: {
                  'games.json': {
                    content: JSON.stringify(allGames)
                  }
                }
              };
              
              // Invia la richiesta all'API
              const options = {
                hostname: 'api.github.com',
                path: `/gists/${process.env.GIST_ID}`,
                method: 'PATCH',
                headers: {
                  'User-Agent': 'Xbox-Game-Deals-Action',
                  'Authorization': `token ${process.env.GITHUB_TOKEN}`,
                  'Content-Type': 'application/json',
                  'Accept': 'application/vnd.github.v3+json'
                }
              };
              
              return new Promise((resolve, reject) => {
                const req = https.request(options, (res) => {
                  let data = '';
                  
                  res.on('data', (chunk) => {
                    data += chunk;
                  });
                  
                  res.on('end', () => {
                    if (res.statusCode >= 200 && res.statusCode < 300) {
                      console.log('Gist aggiornato correttamente!');
                      console.log(`Risposta: ${data}`);
                      resolve();
                    } else {
                      console.error(`Errore nella richiesta: ${res.statusCode}`);
                      console.error(`Risposta: ${data}`);
                      reject(new Error(`HTTP Error: ${res.statusCode}`));
                    }
                  });
                });
                
                req.on('error', (error) => {
                  console.error(`Errore nella richiesta: ${error.message}`);
                  reject(error);
                });
                
                req.write(JSON.stringify(payload));
                req.end();
              });
            } catch (error) {
              console.error(`Errore: ${error.message}`);
              throw error;
            }
          }
          
          updateGist().catch(error => {
            console.error(`Errore fatale: ${error}`);
            process.exit(1);
          });
          EOF
          
          node update_gist.js
